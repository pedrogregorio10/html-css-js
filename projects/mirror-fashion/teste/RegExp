Vamos começar a explicação do código. Por termos abordado antes os atributos type, required e pattern, iremos explicar apenas cada RegExp utilizado. Começando com a linha 12, pattern=”^[A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ ]+” indica que serão aceitos letras maiúsculas, minúsculas, espaços e letras com caracteres especiais.

Na linha 16, o pattern=”(\d{3}\.\d{3}\.\d{3}-\d{2})|(\d{11})” indica que o campo irá aceitar apenas onze números, como a formatação utilizada no CPF, onde são três conjuntos de três números separados por um ponto e em seguida um traço (-) e mais dois números. Uma pequena observação, vai ser validado apenas o formato do CPF, pois o regex não faz cálculo de validação para verificar se o CPF é verdadeiro ou não.

Na linha 18 não é necessário utilizar o pattern, pois o campo e-mail já faz a validação se o dado recebido for um e-mail.

Na linha 25, o pattern=”(?=^.{8,}$)((?=.*\d)|(?=.*\W+))(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$” indica que o usuário deve digitar uma senha que tenha uma letra maiúscula, uma letra minúscula, um caractere especial, um número e no mínimo 8 caracteres.

Na linha 29, o pattern=”\([0–9]{2}\)[\s][0–9]{5}-[0–9]{4}” indica que no primeiro campo devem ser colocados dois números entre parênteses seguidos de um espaço, cinco números seguidos de um traço (-) e mais quatro números.

Na linha 32 utilizamos o date para receber uma data, com isso usamos o min=”1938–01–01", que é a data mínima para ser escolhida e o max=”2000–12–31", que é a data máxima para ser selecionada.
Especificadores
Especificam o conjunto de caracteres a casar em uma posição.

metacaractere	conhecido como	significado
.	curinga	qualquer caractere, exceto a quebra de linha \n (ver flag_dotall)
[...]	conjunto	qualquer caractere incluido no conjunto
[^...]	conjunto negado	qualquer caractere não incluido no conjunto
\d	dígito	o mesmo que [0-9]
\D	não-digíto	o mesmo que [^0-9]
\s	branco	espaço, quebra de linha, tabs etc.; o mesmo que [ \t\n\r\f\v]
\S	não-branco	o mesmo que [^ \t\n\r\f\v]
\w	alfanumérico	o mesmo que [a-zA-Z0-9_] (mas pode incluir caracteres Unicode; ver flag_unicode)
\W	não-alfanumérico	o complemento de \w
\	escape	anula o significado especial do metacaractere seguinte; por exemplo, \. representa apenas um ponto, e não o curinga
Quantificadores
Definem o número permitido repetições da expressão regular precedente.

metacaractere	significado
{n}	exatamente n ocorrências
{n,m}	no mínimo n ocorrências e no máximo m
{n,}	no mínimo n ocorrências
{,n}	no máximo n ocorrências
?	0 ou 1 ocorrência; o mesmo que {,1}
+	1 ou mais ocorrência; o mesmo que {1,}
*	0 ou mais ocorrência
«q»?	modera qualquer um dos quantificadores acima (ver Gula × moderação)
Veja o grupo de exercícios 1. Especificadores e quantificadores.

Âncoras
Estabelecem posições de referência para o casamento do restante da regex. Note que estes metacaracteres não casam com caracteres no texto, mas sim com posições antes, depois ou entre os caracteres.

metacaractere	significado
^	início do texto, ou de uma linha com o flag re.MULTILINE
\A	início do texto
$	fim do texto, ou de uma linha com o flag re.MULTILINE; não captura o \n no fim do texto ou da linha
\Z	fim do texto
\b	posição de borda, logo antes do início de uma palavra, ou logo depois do seu término; o mesmo que a posição entre \W e \w ou vice-versa
\B	posição de não-borda
Veja o grupo de exercícios 2. Âncoras.

Agrupamento
Definem ou grupos ou alternativas.

metacaractere	significado
(...)	define um grupo, para efeito de aplicação de quantificador, alternativa ou de posterir extração ou re-uso
...|...	alternativa; casa a regex à direita ou à esquerda
\«n»	recupera o texto casado no n-ésimo grupo